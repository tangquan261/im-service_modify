/**
 * Copyright (c) 2014-2015, GoBelieve
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package model

import (
	"bytes"
	"io/ioutil"
	"net"
)
import "time"
import "sync"
import "sync/atomic"
import log "github.com/golang/glog"
import "github.com/googollee/go-engine.io"
import "github.com/gorilla/websocket"
import "container/list"
import (
	CommonModel "ServerCommon/model"
	"ServerIM/config"
)

const CLIENT_TIMEOUT = (60 * 6)

//待发送的消息数量限制
const MESSAGE_QUEUE_LIMIT = 1000

type Connection struct {
	conn   interface{}
	closed int32

	forbidden       int32 //是否被禁言
	notification_on bool  //桌面在线时是否通知手机端
	online          bool

	sync_count int64 //点对点消息同步计数，用于判断是否是首次同步
	tc         int32 //write channel timeout count
	Wt         chan *CommonModel.Message
	lwt        chan int
	//离线消息
	pwt chan []*CommonModel.Message

	//客户端协议版本号
	version int

	tm          time.Time
	appid       int64
	uid         int64
	device_id   string
	device_ID   int64 //generated by device_id + platform_id
	platform_id int8

	messages *list.List //待发送的消息队列 FIFO
	mutex    sync.Mutex
}

//自己是否是发送者
func (client *Connection) isSender(msg *CommonModel.Message, device_id int64) bool {
	if msg.Cmd == CommonModel.MSG_IM || msg.Cmd == CommonModel.MSG_GROUP_IM {
		m := msg.Body.(*CommonModel.IMMessage)
		if m.Sender == client.uid && device_id == client.device_ID {
			return true
		}
	}

	if msg.Cmd == CommonModel.MSG_CUSTOMER {
		m := msg.Body.(*CommonModel.CustomerMessage)
		if m.Customer_appid == client.appid &&
			m.Customer_id == client.uid &&
			device_id == client.device_ID {
			return true
		}
	}

	if msg.Cmd == CommonModel.MSG_CUSTOMER_SUPPORT {
		m := msg.Body.(*CommonModel.CustomerMessage)
		if config.Config.Kefu_appid == client.appid &&
			m.Seller_id == client.uid &&
			device_id == client.device_ID {
			return true
		}
	}
	return false
}

//发送超级群消息
func (client *Connection) SendGroupMessage(group_id int64, msg *CommonModel.Message) {
	appid := client.appid

	PublishGroupMessage(appid, group_id, msg)

	group := CommonModel.Group_manager.FindGroup(group_id)
	if group == nil {
		log.Warningf("can't send group message, appid:%d uid:%d cmd:%s",
			appid, group_id, CommonModel.Command(msg.Cmd))
		return
	}

	route := App_route.FindRoute(appid).(*Route)
	if route == nil {
		log.Warningf("can't send group message, appid:%d uid:%d cmd:%s",
			appid, group_id, CommonModel.Command(msg.Cmd))
		return
	}

	members := group.Members()
	for member := range members {
		clients := route.FindClientSet(member)
		if len(clients) == 0 {
			continue
		}

		for c, _ := range clients {
			if &c.Connection == client {
				continue
			}
			c.EnqueueNonBlockMessage(msg)
		}
	}
}

func (client *Connection) SendMessage(uid int64, msg *CommonModel.Message) bool {
	appid := client.appid

	PublishMessage(appid, uid, msg)

	route := App_route.FindRoute(appid).(*Route)
	if route == nil {
		log.Warningf("can't send message, appid:%d uid:%d cmd:%s",
			appid, uid, CommonModel.Command(msg.Cmd))
		return false
	}
	clients := route.FindClientSet(uid)
	if len(clients) == 0 {
		log.Warningf("can't send message, appid:%d uid:%d cmd:%s",
			appid, uid, CommonModel.Command(msg.Cmd))
		return false
	}

	for c, _ := range clients {
		//不再发送给自己
		if &c.Connection == client {
			continue
		}

		c.EnqueueNonBlockMessage(msg)
	}

	return true
}

func (client *Connection) EnqueueNonBlockMessage(msg *CommonModel.Message) bool {
	closed := atomic.LoadInt32(&client.closed)
	if closed > 0 {
		log.Infof("can't send message to closed connection:%d", client.uid)
		return false
	}

	tc := atomic.LoadInt32(&client.tc)
	if tc > 0 {
		log.Infof("can't send message to blocked connection:%d", client.uid)
		atomic.AddInt32(&client.tc, 1)
		return false
	}

	dropped := false
	client.mutex.Lock()
	if client.messages.Len() >= MESSAGE_QUEUE_LIMIT {
		//队列阻塞，丢弃之前的消息
		client.messages.Remove(client.messages.Front())
		dropped = true
	}
	client.messages.PushBack(msg)
	client.mutex.Unlock()
	if dropped {
		log.Info("message queue full, drop a message")
	}

	//nonblock
	select {
	case client.lwt <- 1:
	default:
	}

	return true
}

func (client *Connection) EnqueueMessage(msg *CommonModel.Message) bool {
	closed := atomic.LoadInt32(&client.closed)
	if closed > 0 {
		log.Infof("can't send message to closed connection:%d", client.uid)
		return false
	}

	tc := atomic.LoadInt32(&client.tc)
	if tc > 0 {
		log.Infof("can't send message to blocked connection:%d", client.uid)
		atomic.AddInt32(&client.tc, 1)
		return false
	}
	select {
	case client.Wt <- msg:
		return true
	case <-time.After(60 * time.Second):
		atomic.AddInt32(&client.tc, 1)
		log.Infof("send message to wt timed out:%d", client.uid)
		return false
	}
}

func (client *Connection) EnqueueMessages(msgs []*CommonModel.Message) bool {
	closed := atomic.LoadInt32(&client.closed)
	if closed > 0 {
		log.Infof("can't send messages to closed connection:%d", client.uid)
		return false
	}

	tc := atomic.LoadInt32(&client.tc)
	if tc > 0 {
		log.Infof("can't send messages to blocked connection:%d", client.uid)
		atomic.AddInt32(&client.tc, 1)
		return false
	}
	select {
	case client.pwt <- msgs:
		return true
	case <-time.After(60 * time.Second):
		atomic.AddInt32(&client.tc, 1)
		log.Infof("send messages to pwt timed out:%d", client.uid)
		return false
	}
}

// // 根据连接类型获取消息
func (client *Connection) read() *CommonModel.Message {
	if conn, ok := client.conn.(net.Conn); ok {
		conn.SetReadDeadline(time.Now().Add(CLIENT_TIMEOUT * time.Second))
		return CommonModel.ReceiveClientMessage(conn)
	} else if conn, ok := client.conn.(engineio.Conn); ok {
		return ReadEngineIOMessage(conn)
	} else if conn, ok := client.conn.(*websocket.Conn); ok {
		conn.SetReadDeadline(time.Now().Add(CLIENT_TIMEOUT * time.Second))
		return ReadWebsocketMessage(conn)
	}
	return nil
}

// 根据连接类型发送消息
func (client *Connection) send(msg *CommonModel.Message) {
	if conn, ok := client.conn.(net.Conn); ok {
		tc := atomic.LoadInt32(&client.tc)
		if tc > 0 {
			log.Info("can't write data to blocked socket")
			return
		}
		conn.SetWriteDeadline(time.Now().Add(60 * time.Second))
		err := CommonModel.SendMessage(conn, msg)
		if err != nil {
			atomic.AddInt32(&client.tc, 1)
			log.Info("send msg:", CommonModel.Command(msg.Cmd), " tcp err:", err)
		}
	} else if conn, ok := client.conn.(engineio.Conn); ok {
		SendEngineIOBinaryMessage(conn, msg)
	} else if conn, ok := client.conn.(*websocket.Conn); ok {
		tc := atomic.LoadInt32(&client.tc)
		if tc > 0 {
			log.Info("can't write data to blocked websocket")
			return
		}
		conn.SetWriteDeadline(time.Now().Add(60 * time.Second))
		err := SendWebsocketBinaryMessage(conn, msg)
		if err != nil {
			atomic.AddInt32(&client.tc, 1)
			log.Info("send msg:", CommonModel.Command(msg.Cmd), " websocket err:", err)
		}
	}
}

// 根据连接类型关闭
func (client *Connection) close() {
	if conn, ok := client.conn.(net.Conn); ok {
		conn.Close()
	} else if conn, ok := client.conn.(engineio.Conn); ok {
		//bug:https://github.com/googollee/go-engine.io/issues/34
		conn.Close()
	} else if conn, ok := client.conn.(*websocket.Conn); ok {
		conn.Close()
	}
}

func ReadEngineIOMessage(conn engineio.Conn) *CommonModel.Message {
	t, r, err := conn.NextReader()
	if err != nil {
		return nil
	}
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil
	}
	r.Close()
	if t == engineio.TEXT {
		return nil
	} else {
		return ReadBinaryMesage(b)
	}
}

func ReadWebsocketMessage(conn *websocket.Conn) *CommonModel.Message {
	messageType, p, err := conn.ReadMessage()
	if err != nil {
		log.Info("read websocket err:", err)
		return nil
	}
	if messageType == websocket.BinaryMessage {
		return ReadBinaryMesage(p)
	} else {
		log.Error("invalid websocket message type:", messageType)
		return nil
	}
}

func SendEngineIOBinaryMessage(conn engineio.Conn, msg *CommonModel.Message) {
	w, err := conn.NextWriter(engineio.BINARY)
	if err != nil {
		log.Info("get next writer fail")
		return
	}
	log.Info("message version:", msg.Version, msg.Cmd)
	err = CommonModel.SendMessage(w, msg)
	if err != nil {
		log.Info("engine io write error")
		return
	}
	w.Close()
}
func SendWebsocketBinaryMessage(conn *websocket.Conn, msg *CommonModel.Message) error {
	w, err := conn.NextWriter(websocket.BinaryMessage)
	if err != nil {
		log.Info("get next writer fail")
		return err
	}
	err = CommonModel.SendMessage(w, msg)
	if err != nil {
		return err
	}
	err = w.Close()
	return err
}

func ReadBinaryMesage(b []byte) *CommonModel.Message {
	reader := bytes.NewReader(b)
	return CommonModel.ReceiveClientMessage(reader)
}

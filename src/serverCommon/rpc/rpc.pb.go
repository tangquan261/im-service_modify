// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Reply
	GroupNotification
	GroupMessage
	PeerMessage
	SystemMessage
	RoomMessage
	CustomerMessage
	RealTimeMessage
	NewCountRequest
	NewCount
	LoadLatestRequest
	LoadHistoryRequest
	Message
	HistoryMessage
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 0 成功, 1 失败
type Reply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Reply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type GroupNotification struct {
	Appid   int64   `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	GroupId int64   `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Content string  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Members []int64 `protobuf:"varint,4,rep,packed,name=members" json:"members,omitempty"`
}

func (m *GroupNotification) Reset()                    { *m = GroupNotification{} }
func (m *GroupNotification) String() string            { return proto.CompactTextString(m) }
func (*GroupNotification) ProtoMessage()               {}
func (*GroupNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupNotification) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *GroupNotification) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupNotification) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GroupNotification) GetMembers() []int64 {
	if m != nil {
		return m.Members
	}
	return nil
}

type GroupMessage struct {
	Appid   int64  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Sender  int64  `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`
	GroupId int64  `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *GroupMessage) Reset()                    { *m = GroupMessage{} }
func (m *GroupMessage) String() string            { return proto.CompactTextString(m) }
func (*GroupMessage) ProtoMessage()               {}
func (*GroupMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GroupMessage) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *GroupMessage) GetSender() int64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *GroupMessage) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type PeerMessage struct {
	Appid    int64  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Sender   int64  `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`
	Receiver int64  `protobuf:"varint,3,opt,name=receiver" json:"receiver,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *PeerMessage) Reset()                    { *m = PeerMessage{} }
func (m *PeerMessage) String() string            { return proto.CompactTextString(m) }
func (*PeerMessage) ProtoMessage()               {}
func (*PeerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PeerMessage) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *PeerMessage) GetSender() int64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *PeerMessage) GetReceiver() int64 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *PeerMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type SystemMessage struct {
	Appid   int64  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Uid     int64  `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (m *SystemMessage) Reset()                    { *m = SystemMessage{} }
func (m *SystemMessage) String() string            { return proto.CompactTextString(m) }
func (*SystemMessage) ProtoMessage()               {}
func (*SystemMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SystemMessage) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *SystemMessage) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SystemMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type RoomMessage struct {
	Appid   int64  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Uid     int64  `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	RoomId  int64  `protobuf:"varint,3,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *RoomMessage) Reset()                    { *m = RoomMessage{} }
func (m *RoomMessage) String() string            { return proto.CompactTextString(m) }
func (*RoomMessage) ProtoMessage()               {}
func (*RoomMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RoomMessage) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *RoomMessage) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomMessage) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CustomerMessage struct {
	CustomerAppid int64  `protobuf:"varint,1,opt,name=customer_appid,json=customerAppid" json:"customer_appid,omitempty"`
	CustomerId    int64  `protobuf:"varint,2,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	StoreId       int64  `protobuf:"varint,3,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	SellerId      int64  `protobuf:"varint,4,opt,name=seller_id,json=sellerId" json:"seller_id,omitempty"`
	Content       string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
}

func (m *CustomerMessage) Reset()                    { *m = CustomerMessage{} }
func (m *CustomerMessage) String() string            { return proto.CompactTextString(m) }
func (*CustomerMessage) ProtoMessage()               {}
func (*CustomerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CustomerMessage) GetCustomerAppid() int64 {
	if m != nil {
		return m.CustomerAppid
	}
	return 0
}

func (m *CustomerMessage) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func (m *CustomerMessage) GetStoreId() int64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *CustomerMessage) GetSellerId() int64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *CustomerMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type RealTimeMessage struct {
	Appid    int64  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Sender   int64  `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`
	Receiver int64  `protobuf:"varint,3,opt,name=receiver" json:"receiver,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *RealTimeMessage) Reset()                    { *m = RealTimeMessage{} }
func (m *RealTimeMessage) String() string            { return proto.CompactTextString(m) }
func (*RealTimeMessage) ProtoMessage()               {}
func (*RealTimeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RealTimeMessage) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *RealTimeMessage) GetSender() int64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *RealTimeMessage) GetReceiver() int64 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *RealTimeMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NewCountRequest struct {
	Appid int64 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Uid   int64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *NewCountRequest) Reset()                    { *m = NewCountRequest{} }
func (m *NewCountRequest) String() string            { return proto.CompactTextString(m) }
func (*NewCountRequest) ProtoMessage()               {}
func (*NewCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NewCountRequest) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *NewCountRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type NewCount struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *NewCount) Reset()                    { *m = NewCount{} }
func (m *NewCount) String() string            { return proto.CompactTextString(m) }
func (*NewCount) ProtoMessage()               {}
func (*NewCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NewCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type LoadLatestRequest struct {
	Appid int64 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Uid   int64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Limit int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *LoadLatestRequest) Reset()                    { *m = LoadLatestRequest{} }
func (m *LoadLatestRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadLatestRequest) ProtoMessage()               {}
func (*LoadLatestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LoadLatestRequest) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *LoadLatestRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LoadLatestRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type LoadHistoryRequest struct {
	Appid  int64 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Uid    int64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	LastId int64 `protobuf:"varint,3,opt,name=last_id,json=lastId" json:"last_id,omitempty"`
}

func (m *LoadHistoryRequest) Reset()                    { *m = LoadHistoryRequest{} }
func (m *LoadHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadHistoryRequest) ProtoMessage()               {}
func (*LoadHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LoadHistoryRequest) GetAppid() int64 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *LoadHistoryRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LoadHistoryRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

type Message struct {
	Id        int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Timestamp int32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to M:
	//	*Message_Peer
	//	*Message_Group
	//	*Message_GroupNotification
	//	*Message_Customer
	//	*Message_CustomerSupport
	M isMessage_M `protobuf_oneof:"m"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isMessage_M interface {
	isMessage_M()
}

type Message_Peer struct {
	Peer *PeerMessage `protobuf:"bytes,3,opt,name=peer,oneof"`
}
type Message_Group struct {
	Group *GroupMessage `protobuf:"bytes,4,opt,name=group,oneof"`
}
type Message_GroupNotification struct {
	GroupNotification *GroupNotification `protobuf:"bytes,5,opt,name=group_notification,json=groupNotification,oneof"`
}
type Message_Customer struct {
	Customer *CustomerMessage `protobuf:"bytes,6,opt,name=customer,oneof"`
}
type Message_CustomerSupport struct {
	CustomerSupport *CustomerMessage `protobuf:"bytes,7,opt,name=customer_support,json=customerSupport,oneof"`
}

func (*Message_Peer) isMessage_M()              {}
func (*Message_Group) isMessage_M()             {}
func (*Message_GroupNotification) isMessage_M() {}
func (*Message_Customer) isMessage_M()          {}
func (*Message_CustomerSupport) isMessage_M()   {}

func (m *Message) GetM() isMessage_M {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *Message) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Message) GetPeer() *PeerMessage {
	if x, ok := m.GetM().(*Message_Peer); ok {
		return x.Peer
	}
	return nil
}

func (m *Message) GetGroup() *GroupMessage {
	if x, ok := m.GetM().(*Message_Group); ok {
		return x.Group
	}
	return nil
}

func (m *Message) GetGroupNotification() *GroupNotification {
	if x, ok := m.GetM().(*Message_GroupNotification); ok {
		return x.GroupNotification
	}
	return nil
}

func (m *Message) GetCustomer() *CustomerMessage {
	if x, ok := m.GetM().(*Message_Customer); ok {
		return x.Customer
	}
	return nil
}

func (m *Message) GetCustomerSupport() *CustomerMessage {
	if x, ok := m.GetM().(*Message_CustomerSupport); ok {
		return x.CustomerSupport
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Peer)(nil),
		(*Message_Group)(nil),
		(*Message_GroupNotification)(nil),
		(*Message_Customer)(nil),
		(*Message_CustomerSupport)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// m
	switch x := m.M.(type) {
	case *Message_Peer:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Peer); err != nil {
			return err
		}
	case *Message_Group:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Group); err != nil {
			return err
		}
	case *Message_GroupNotification:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupNotification); err != nil {
			return err
		}
	case *Message_Customer:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Customer); err != nil {
			return err
		}
	case *Message_CustomerSupport:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomerSupport); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.M has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // m.peer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerMessage)
		err := b.DecodeMessage(msg)
		m.M = &Message_Peer{msg}
		return true, err
	case 4: // m.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GroupMessage)
		err := b.DecodeMessage(msg)
		m.M = &Message_Group{msg}
		return true, err
	case 5: // m.group_notification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GroupNotification)
		err := b.DecodeMessage(msg)
		m.M = &Message_GroupNotification{msg}
		return true, err
	case 6: // m.customer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomerMessage)
		err := b.DecodeMessage(msg)
		m.M = &Message_Customer{msg}
		return true, err
	case 7: // m.customer_support
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomerMessage)
		err := b.DecodeMessage(msg)
		m.M = &Message_CustomerSupport{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// m
	switch x := m.M.(type) {
	case *Message_Peer:
		s := proto.Size(x.Peer)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Group:
		s := proto.Size(x.Group)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_GroupNotification:
		s := proto.Size(x.GroupNotification)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Customer:
		s := proto.Size(x.Customer)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CustomerSupport:
		s := proto.Size(x.CustomerSupport)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HistoryMessage struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *HistoryMessage) Reset()                    { *m = HistoryMessage{} }
func (m *HistoryMessage) String() string            { return proto.CompactTextString(m) }
func (*HistoryMessage) ProtoMessage()               {}
func (*HistoryMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *HistoryMessage) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*Reply)(nil), "rpc.Reply")
	proto.RegisterType((*GroupNotification)(nil), "rpc.GroupNotification")
	proto.RegisterType((*GroupMessage)(nil), "rpc.GroupMessage")
	proto.RegisterType((*PeerMessage)(nil), "rpc.PeerMessage")
	proto.RegisterType((*SystemMessage)(nil), "rpc.SystemMessage")
	proto.RegisterType((*RoomMessage)(nil), "rpc.RoomMessage")
	proto.RegisterType((*CustomerMessage)(nil), "rpc.CustomerMessage")
	proto.RegisterType((*RealTimeMessage)(nil), "rpc.RealTimeMessage")
	proto.RegisterType((*NewCountRequest)(nil), "rpc.NewCountRequest")
	proto.RegisterType((*NewCount)(nil), "rpc.NewCount")
	proto.RegisterType((*LoadLatestRequest)(nil), "rpc.LoadLatestRequest")
	proto.RegisterType((*LoadHistoryRequest)(nil), "rpc.LoadHistoryRequest")
	proto.RegisterType((*Message)(nil), "rpc.Message")
	proto.RegisterType((*HistoryMessage)(nil), "rpc.HistoryMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IM service

type IMClient interface {
	PostGroupNotification(ctx context.Context, in *GroupNotification, opts ...grpc.CallOption) (*Reply, error)
	PostGroupMessage(ctx context.Context, in *GroupMessage, opts ...grpc.CallOption) (*Reply, error)
	PostPeerMessage(ctx context.Context, in *PeerMessage, opts ...grpc.CallOption) (*Reply, error)
	PostSystemMessage(ctx context.Context, in *SystemMessage, opts ...grpc.CallOption) (*Reply, error)
	GetNewCount(ctx context.Context, in *NewCountRequest, opts ...grpc.CallOption) (*NewCount, error)
	LoadLatestMessage(ctx context.Context, in *LoadLatestRequest, opts ...grpc.CallOption) (*HistoryMessage, error)
	LoadHistoryMessage(ctx context.Context, in *LoadHistoryRequest, opts ...grpc.CallOption) (*HistoryMessage, error)
}

type iMClient struct {
	cc *grpc.ClientConn
}

func NewIMClient(cc *grpc.ClientConn) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) PostGroupNotification(ctx context.Context, in *GroupNotification, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/rpc.IM/PostGroupNotification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) PostGroupMessage(ctx context.Context, in *GroupMessage, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/rpc.IM/PostGroupMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) PostPeerMessage(ctx context.Context, in *PeerMessage, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/rpc.IM/PostPeerMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) PostSystemMessage(ctx context.Context, in *SystemMessage, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/rpc.IM/PostSystemMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) GetNewCount(ctx context.Context, in *NewCountRequest, opts ...grpc.CallOption) (*NewCount, error) {
	out := new(NewCount)
	err := grpc.Invoke(ctx, "/rpc.IM/GetNewCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) LoadLatestMessage(ctx context.Context, in *LoadLatestRequest, opts ...grpc.CallOption) (*HistoryMessage, error) {
	out := new(HistoryMessage)
	err := grpc.Invoke(ctx, "/rpc.IM/LoadLatestMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) LoadHistoryMessage(ctx context.Context, in *LoadHistoryRequest, opts ...grpc.CallOption) (*HistoryMessage, error) {
	out := new(HistoryMessage)
	err := grpc.Invoke(ctx, "/rpc.IM/LoadHistoryMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IM service

type IMServer interface {
	PostGroupNotification(context.Context, *GroupNotification) (*Reply, error)
	PostGroupMessage(context.Context, *GroupMessage) (*Reply, error)
	PostPeerMessage(context.Context, *PeerMessage) (*Reply, error)
	PostSystemMessage(context.Context, *SystemMessage) (*Reply, error)
	GetNewCount(context.Context, *NewCountRequest) (*NewCount, error)
	LoadLatestMessage(context.Context, *LoadLatestRequest) (*HistoryMessage, error)
	LoadHistoryMessage(context.Context, *LoadHistoryRequest) (*HistoryMessage, error)
}

func RegisterIMServer(s *grpc.Server, srv IMServer) {
	s.RegisterService(&_IM_serviceDesc, srv)
}

func _IM_PostGroupNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).PostGroupNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/PostGroupNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).PostGroupNotification(ctx, req.(*GroupNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_PostGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).PostGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/PostGroupMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).PostGroupMessage(ctx, req.(*GroupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_PostPeerMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).PostPeerMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/PostPeerMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).PostPeerMessage(ctx, req.(*PeerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_PostSystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).PostSystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/PostSystemMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).PostSystemMessage(ctx, req.(*SystemMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_GetNewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).GetNewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/GetNewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).GetNewCount(ctx, req.(*NewCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_LoadLatestMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).LoadLatestMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/LoadLatestMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).LoadLatestMessage(ctx, req.(*LoadLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_LoadHistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).LoadHistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.IM/LoadHistoryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).LoadHistoryMessage(ctx, req.(*LoadHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostGroupNotification",
			Handler:    _IM_PostGroupNotification_Handler,
		},
		{
			MethodName: "PostGroupMessage",
			Handler:    _IM_PostGroupMessage_Handler,
		},
		{
			MethodName: "PostPeerMessage",
			Handler:    _IM_PostPeerMessage_Handler,
		},
		{
			MethodName: "PostSystemMessage",
			Handler:    _IM_PostSystemMessage_Handler,
		},
		{
			MethodName: "GetNewCount",
			Handler:    _IM_GetNewCount_Handler,
		},
		{
			MethodName: "LoadLatestMessage",
			Handler:    _IM_LoadLatestMessage_Handler,
		},
		{
			MethodName: "LoadHistoryMessage",
			Handler:    _IM_LoadHistoryMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x76, 0xe2, 0x38, 0x1f, 0xe3, 0xb6, 0x49, 0xf6, 0xed, 0xdb, 0x9a, 0x80, 0xd4, 0xc8, 0x12,
	0x28, 0x5c, 0x2a, 0x91, 0xc2, 0x01, 0x24, 0x0e, 0x6d, 0x91, 0x9a, 0x48, 0x6d, 0xd5, 0x6e, 0xe1,
	0x5c, 0xb9, 0xf6, 0x50, 0x2c, 0xd9, 0x59, 0xd7, 0xbb, 0x06, 0xfa, 0x77, 0xb8, 0xf2, 0x63, 0xf8,
	0x4b, 0x68, 0xd7, 0x1f, 0xb1, 0x13, 0x25, 0x22, 0x1c, 0xb8, 0xf9, 0x99, 0x9d, 0x67, 0x66, 0xf4,
	0xcc, 0x87, 0xa1, 0x13, 0x47, 0xee, 0x61, 0x14, 0x33, 0xc1, 0x88, 0x1e, 0x47, 0xae, 0x7d, 0x00,
	0x06, 0xc5, 0x28, 0x78, 0x24, 0x7b, 0xd0, 0x8c, 0x91, 0x27, 0x81, 0xb0, 0x6a, 0xc3, 0xda, 0xc8,
	0xa0, 0x19, 0xb2, 0xbf, 0x43, 0xff, 0x2c, 0x66, 0x49, 0x74, 0xc9, 0x84, 0xff, 0xd9, 0x77, 0x1d,
	0xe1, 0xb3, 0x19, 0xd9, 0x05, 0xc3, 0x89, 0x22, 0xdf, 0x53, 0xbe, 0x3a, 0x4d, 0x01, 0x79, 0x02,
	0xed, 0x7b, 0xe9, 0x7a, 0xeb, 0x7b, 0x56, 0x5d, 0x3d, 0xb4, 0x14, 0x9e, 0x7a, 0xc4, 0x82, 0x96,
	0xcb, 0x66, 0x02, 0x67, 0xc2, 0xd2, 0x87, 0xb5, 0x51, 0x87, 0xe6, 0x50, 0xbe, 0x84, 0x18, 0xde,
	0x61, 0xcc, 0xad, 0xc6, 0x50, 0x97, 0x9c, 0x0c, 0xda, 0x0f, 0xb0, 0xa5, 0x32, 0x5f, 0x20, 0xe7,
	0xce, 0x3d, 0xae, 0x48, 0xba, 0x07, 0x4d, 0x8e, 0x33, 0x0f, 0xe3, 0x2c, 0x65, 0x86, 0x2a, 0xc5,
	0xe8, 0x2b, 0x8b, 0x69, 0x54, 0x8a, 0xb1, 0x1f, 0xc0, 0xbc, 0x42, 0x8c, 0xff, 0x2e, 0xe3, 0x00,
	0xda, 0x31, 0xba, 0xe8, 0x7f, 0xc5, 0x38, 0xcb, 0x58, 0xe0, 0x35, 0x29, 0xaf, 0x61, 0xfb, 0xe6,
	0x91, 0x0b, 0x0c, 0xd7, 0x27, 0xed, 0x81, 0x9e, 0x14, 0xb2, 0xca, 0xcf, 0xd5, 0x92, 0xda, 0x5f,
	0xc0, 0xa4, 0x8c, 0x6d, 0x1c, 0x70, 0x1f, 0x5a, 0x31, 0x63, 0xe1, 0x5c, 0xb0, 0xa6, 0x84, 0x6b,
	0xf5, 0xfa, 0x59, 0x83, 0xee, 0x69, 0xc2, 0x05, 0x0b, 0xe7, 0xa2, 0x3d, 0x87, 0x1d, 0x37, 0x33,
	0xdd, 0x96, 0xf3, 0x6e, 0xe7, 0xd6, 0x63, 0x95, 0xff, 0x00, 0xcc, 0xc2, 0xad, 0xa8, 0x03, 0x72,
	0xd3, 0x54, 0x4d, 0x13, 0x17, 0x2c, 0xc6, 0x52, 0x03, 0x15, 0x9e, 0x7a, 0xe4, 0x29, 0x74, 0x38,
	0x06, 0x41, 0xca, 0x6c, 0xa4, 0x52, 0xa7, 0x86, 0x6a, 0xb5, 0x46, 0xb5, 0xda, 0x04, 0xba, 0x14,
	0x9d, 0xe0, 0xa3, 0x1f, 0xe2, 0xbf, 0xec, 0xf0, 0x5b, 0xe8, 0x5e, 0xe2, 0xb7, 0x53, 0x96, 0xcc,
	0x04, 0xc5, 0x87, 0x04, 0xb9, 0xf8, 0xd3, 0x96, 0xd8, 0x43, 0x68, 0xe7, 0x54, 0xc9, 0x71, 0xe5,
	0x47, 0xb6, 0x9f, 0x29, 0xb0, 0xaf, 0xa1, 0x7f, 0xce, 0x1c, 0xef, 0xdc, 0x11, 0xc8, 0x37, 0x0d,
	0x2f, 0xfd, 0x02, 0x3f, 0xf4, 0xd3, 0x01, 0x32, 0x68, 0x0a, 0xec, 0x4f, 0x40, 0x64, 0xc8, 0x89,
	0x2f, 0xe5, 0x7e, 0xdc, 0x34, 0xe6, 0x3e, 0xb4, 0x02, 0x87, 0x8b, 0xd2, 0x14, 0x49, 0x38, 0xf5,
	0xec, 0x5f, 0x75, 0x68, 0xe5, 0xb2, 0xef, 0x40, 0xbd, 0x88, 0x54, 0xf7, 0x3d, 0xf2, 0x0c, 0x3a,
	0xc2, 0x0f, 0x91, 0x0b, 0x27, 0x8c, 0x54, 0x30, 0x83, 0xce, 0x0d, 0xe4, 0x05, 0x34, 0x22, 0xcc,
	0x24, 0x37, 0xc7, 0xbd, 0x43, 0x79, 0xc2, 0x4a, 0x6b, 0x3a, 0xd1, 0xa8, 0x7a, 0x27, 0x2f, 0xc1,
	0x50, 0x2b, 0xae, 0x1a, 0x60, 0x8e, 0xfb, 0xca, 0xb1, 0x7c, 0x42, 0x26, 0x1a, 0x4d, 0x3d, 0xc8,
	0x19, 0x90, 0xf4, 0x3a, 0xcc, 0x4a, 0x67, 0x4d, 0xcd, 0x8b, 0x39, 0xde, 0x9b, 0xf3, 0xca, 0x47,
	0x6f, 0xa2, 0xd1, 0xfe, 0xfd, 0xd2, 0x25, 0x1c, 0x43, 0x3b, 0x9f, 0x59, 0xab, 0xa9, 0xe8, 0xbb,
	0x8a, 0xbe, 0xb0, 0x15, 0x13, 0x8d, 0x16, 0x7e, 0xe4, 0x18, 0x7a, 0xc5, 0xe8, 0xf3, 0x24, 0x8a,
	0x58, 0x2c, 0xac, 0xd6, 0x5a, 0x6e, 0x37, 0xf7, 0xbf, 0x49, 0xdd, 0x4f, 0x74, 0xa8, 0x85, 0xf6,
	0x3b, 0xd8, 0xc9, 0x9a, 0x94, 0xeb, 0x3a, 0x82, 0x76, 0x98, 0x7e, 0x72, 0xab, 0x36, 0xd4, 0x47,
	0xe6, 0x78, 0x4b, 0x45, 0xcc, 0xde, 0x69, 0xf1, 0x3a, 0xfe, 0xa1, 0x43, 0x7d, 0x7a, 0x41, 0xde,
	0xc3, 0xff, 0x57, 0x8c, 0x8b, 0xe5, 0x0b, 0xbf, 0x42, 0x84, 0x01, 0x28, 0xbb, 0xfa, 0x65, 0xd8,
	0x1a, 0x39, 0x82, 0x5e, 0x41, 0xcf, 0x6b, 0x58, 0x96, 0x7d, 0x81, 0xf4, 0x0a, 0xba, 0x92, 0x54,
	0x3e, 0xb4, 0x4b, 0x3d, 0x5d, 0xa0, 0xbc, 0x81, 0xbe, 0xa4, 0x54, 0x0f, 0x25, 0x51, 0x2e, 0x15,
	0xdb, 0x02, 0xed, 0x35, 0x98, 0x67, 0x28, 0xe6, 0x1b, 0xa4, 0x1e, 0x17, 0x76, 0x71, 0xb0, 0x5d,
	0xb1, 0xda, 0x1a, 0x39, 0x29, 0xaf, 0x54, 0x9e, 0x2c, 0xd5, 0x63, 0x69, 0xd5, 0x06, 0xff, 0x29,
	0x7b, 0xb5, 0x0d, 0xb6, 0x46, 0x3e, 0x54, 0x76, 0x28, 0x0f, 0xb2, 0x5f, 0x04, 0xa9, 0x2e, 0xd7,
	0x8a, 0x28, 0x77, 0x4d, 0xf5, 0xa3, 0x3e, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x85, 0x44, 0x0e,
	0xee, 0xb5, 0x07, 0x00, 0x00,
}
